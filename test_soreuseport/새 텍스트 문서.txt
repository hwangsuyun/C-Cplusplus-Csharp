#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <string.h>
#include <signal.h>
#include <sys/signal.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <time.h>
#include <arpa/inet.h>

int gPort = 1004;
int gSocket[10];

void *recvThread(void *data)
{
    int i = 0;
    int socket = 0;
    int recvLen = 0;
    struct sockaddr_in saAddr;
    struct timeval timeWait;
    char recvBuf[1024] = {0};

    socket = gSocket[*(int *)data];
    if (socket >= 0)
    {
        fd_set fdVar;
        FD_ZERO(&fdVar);
        FD_SET((unsigned)socket, &fdVar);

	  while (1)
        {   
            timeWait.tv_sec = 0;
            timeWait.tv_usec = 10000;
            if (select (socket + 1, &fdVar, NULL, NULL, &timeWait) <= 0)
            {   
                continue;
            }
            recvLen = recvfrom(socket, recvBuf, 1024, 0, (struct sockaddr *) &saAddr, &i);
            if (recvLen > 0)
            {   
                printf("recvBuf : (%s)\n", recvBuf);
            }
        }
        close(socket);
    }
}

int createThread()
{
    int i = 0;
    int threadId = 0;
    pthread_attr_t thdAttr;
    pthread_t recv_th;

    pthread_attr_init(&thdAttr);
    pthread_attr_setscope(&thdAttr, PTHREAD_SCOPE_SYSTEM);
    pthread_attr_setdetachstate(&thdAttr, PTHREAD_CREATE_JOINABLE);

    for (i = 0; i < 3; i++)
    {
        threadId = pthread_create(&recv_th, &thdAttr, recvThread, &i);
        if (threadId < 0)
        {
            printf("fail to careate recvThread\n");
            return -1;
        }
        else
        {
            printf("success to create reacvThread\n");
        }
        sleep(1);
    }

    return 0;
}

int initSocket()
{
    int i = 0;
    struct sockaddr_in server_addr;

    for (i = 0; i < 3; i++)
    {
        gSocket[i] = socket(AF_INET, SOCK_DGRAM, 0);
        if(-1 == gSocket[i])
        {
            printf("failed socket\n");
            return -1;
        }
        int optval = 1;
        setsockopt(gSocket[i], SOL_SOCKET, SO_REUSEPORT, &optval, sizeof(optval));
    }

    for (i = 0; i < 3; i++)
    {
        memset(&server_addr, 0, sizeof( server_addr));
        server_addr.sin_family = AF_INET;
        server_addr.sin_port = htons( 4000);
        server_addr.sin_addr.s_addr = htonl( INADDR_ANY);

        if (-1 == bind(gSocket[i], (struct sockaddr*)&server_addr, sizeof(server_addr)))
        {
            printf("failed bind\n");
            return -1;
        }
    }

    return 0;
}

int main()
{
    int ret = 0;

    ret = initSocket();
    if (ret < 0)
    {
        printf("failed initSocket\n");
        return -1;
    }

    ret = createThread();
    if (ret < 0)
    {
        printf("failed createThread\n");
        return -1;
    }

    while (1)
    {
        sleep(100);
    }

    return 0;
}

