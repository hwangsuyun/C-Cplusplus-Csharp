#ifndef _IPV6_UTIL_HEADER_
#define _IPV6_UTIL_HEADER_

#define IPV6_UTIL_IPV4_ADDRESS_TYPE		0x01
#define IPV6_UTIL_IPV4_MAPPED_IPV6_ADDRESS_TYPE		0x02
#define IPV6_UTIL_IPV6_ADDRESS_TYPE		0x03

#define IPV6_UTIL_IPV6_ADDRESS_NORMAL_TYPE								0x01
#define IPV6_UTIL_IPV6_ADDRESS_OMIT_LEADING_ZEROS_TYPE					0x02
#define IPV6_UTIL_IPV6_ADDRESS_COMPRESS_TARGET_OMIT_LEADING_ZEROS_TYPE	0x03
#define IPV6_UTIL_IPV6_ADDRESS_COMPRESS_TYPE							0x04

#define IPV6_UTIL_IPV6_ADDRESS_COMPRESS_BEGIN_TYPE			0x01
#define IPV6_UTIL_IPV6_ADDRESS_COMPRESS_MIDDLE_TYPE			0x02
#define IPV6_UTIL_IPV6_ADDRESS_COMPRESS_END_TYPE			0x03

#define IPV6_UTIL_UNCOMPRESS_OMIT_LEADING_ZEROS_ONE_TYPE	0x01
#define IPV6_UTIL_UNCOMPRESS_OMIT_LEADING_ZEROS_TWO_TYPE	0x02
#define IPV6_UTIL_UNCOMPRESS_OMIT_LEADING_ZEROS_THREE_TYPE	0x03
#define IPV6_UTIL_UNCOMPRESS_OMIT_LEADING_ZEROS_FOUR_TYPE	0x04

#define IPV6_UTIL_MIN_IPV6_ADDRESS_LENGTH	2
#define IPV6_UTIL_MAX_IPV6_ADDRESS_LENGTH	39
#define IPV6_UTIL_MAX_IPV4_ADDRESS_LENGTH	15
#define IPV6_UTIL_MAX_IPV6_ADDRESS_FIELD_LENGTH 4
#define IPV6_UTIL_NORMAL_IPV6_ADDRESS_LENGTH	IPV6_UTIL_MAX_IPV6_ADDRESS_LENGTH	
#define IPV6_UTIL_DOUBLE_COLON_LENGTH	2
#define IPV6_UTIL_IPV4_MAPPED_PREFIX_COMPRESS_LENGTH	7				
#define IPV6_UTIL_MAX_IPV4_MAPPED_IPV6_ADDRESS_LENGTH	45
#define IPV6_UTIL_IPV4_MAPPED_PREFIX_NORMAL_LENGTH		30		
#define IPV6_UTIL_IPV4_MAPPED_PREFIX_OMIT_LEADING_ZEROS_LENGTH		15	

#define IPV6_UTIL_INIT_VALUE		0
#define IPV6_UTIL_MIN_COLON_COUNT	2
#define IPV6_UTIL_MAX_COLON_COUNT	7
#define IPV6_UTIL_COMPRESS_BEGIN_TYPE_MAX_COLON_COUNT	8
#define IPV6_UTIL_COMPRESS_END_TYPE_MAX_COLON_COUNT		8

#define IPV6_UTIL_OMIT_COMPRESS_BEGIN_TYPE_COLON_COUNT	2
#define IPV6_UTIL_OMIT_COMPRESS_END_TYPE_COLON_COUNT  IPV6_UTIL_OMIT_COMPRESS_BEGIN_TYPE_COLON_COUNT	

#define IPV6_UTIL_INIT_IPV6_ADDRESS_FIELD_COUNT 0
#define IPV6_UTIL_MAX_IPV6_ADDRESS_FIELD_COUNT 8
#define IPV6_UTIL_MAX_IPV6_ADDRESS_COMPRESS_TYPE_FIELD_COUNT 7

#define IPV6_UTIL_SUCCESS	0
#define IPV6_UTIL_ERROR (-1)
#define IPV6_UTIL_ERROR_INPUT_DATA_NULL (-1)
#define IPV6_UTIL_ERROR_INVALID_IPV6_ADDRESS (-2)
#define IPV6_UTIL_ERROR_INVALID_IPV6_ADDRESS_LENGTH (-3)
#define IPV6_UTIL_ERROR_IPV6_ADDRESS_UNKNOWN_TYPE (-4)
#define IPV6_UTIL_ERROR_IPV6_ADDRESS_NOT_COMPRESS_TYPE (-5)
#define IPV6_UTIL_ERROR_IPV6_ADDRESS_COLON_MAX_COUNT_OVER (-6)
#define IPV6_UTIL_ERROR_NOT_IPV4_MAPPED_ADDRESS (-7)
#define IPV6_UTIL_ERROR_IPV6_ADDRESS_COMPRESS_TYPE_FIELD_MAX_COUNT_OVER (-8)


#define IPV6_UTIL_INIT_COLON_FLAG				0x00
#define IPV6_UTIL_SINGLE_COLON_FLAG				0x01
#define IPV6_UTIL_DOUBLE_COLON_FLAG				0x02

#define IPV6_UTIL_OMIT_LEADING_ZEROS_START_FLAG				0x01
#define IPV6_UTIL_OMIT_LEADING_ZEROS_END_FLAG				0x00

#define IPV6_UTIL_COMPRESS_START_FLAG           0x01
#define IPV6_UTIL_COMPRESS_END_FLAG           0x02


#define IPV6_UTIL_INIT_COMPRESS_COLON_FLAG		0x00
#define IPV6_UTIL_COMPRESS_COLON_FLAG			0x01

#define IPV6_UTIL_DOUBLE_COLON_STRING			"::"
#define IPV6_UTIL_IPV4_MAPPED_PREFIX_COMPRESS				"::ffff:"
#define IPV6_UTIL_IPV4_MAPPED_PREFIX_NORMAL					"0000:0000:0000:0000:0000:ffff:"
#define IPV6_UTIL_IPV4_MAPPED_PREFIX_OMIT_LEADING_ZEROS		"0:0:0:0:0:ffff:"
#define IPV6_UTIL_OMIT_LEADING_ZEROS_ONE			"0"
#define IPV6_UTIL_OMIT_LEADING_ZEROS_TWO			"00"
#define IPV6_UTIL_OMIT_LEADING_ZEROS_THREE			"000"
#define IPV6_UTIL_OMIT_LEADING_ZEROS_FOUR			"0000"

#define IPV6_UTIL_UNCOMPRESS_OMIT_LEADING_ZEROS_ONE_FORMAT			"000%s"
#define IPV6_UTIL_UNCOMPRESS_OMIT_LEADING_ZEROS_TWO_FORMAT			"00%s"
#define IPV6_UTIL_UNCOMPRESS_OMIT_LEADING_ZEROS_THREE_FORMAT		"0%s"
#define IPV6_UTIL_UNCOMPRESS_OMIT_LEADING_ZEROS_FOUR_FORMAT		"%s"
#define IPV6_UTIL_UNCOMPRESS_IPV6_ADDRESS_FORMAT		"%s:%s:%s:%s:%s:%s:%s:%s"

#define IPV6_UTIL_COLON_CODE				0x3A
#define IPV6_UTIL_PERIOD_CODE				0x2E

#ifdef WIN
#define ipv6_util_string_copy(ob,bs,format, ...)	_snprintf_s(ob,bs,(bs)-1,format, __VA_ARGS__)
#else
#define ipv6_util_string_copy(ob,bs,format, args...)	snprintf(ob,bs,format, ##args)
#endif

#define VERIFY_IPV6_ADDRESS_FORMAT(addr,l) \
		while( *addr && ( (*addr == 0x3A ) || (*addr >= 0x30 && *addr <= 0x39) || (*addr >= 0x41 && *addr <= 0x46) \
				|| (*addr >= 0x61 && *addr <= 0x66) ) ){ addr++; l++; }
	

#define GET_IPV6_ADDRESS_COLON_COUNT(addr,cnt) \
		while(*addr) if( *addr++ == IPV6_UTIL_COLON_CODE) cnt++;

#define TO_LOWER_CASE(c) while(*c){ *c = tolower(*c); c++; }

#define IPV6_UTIL_CONVERT_IPV4_TO_IPV4_MAPPED_IPV6(in,out) snprintf(out,sizeof(out),"%s%s",IPV6_UTIL_IPV4_MAPPED_PREFIX_COMPRESS,in);


typedef struct ipv6_util_v6_address_field_st{
    int compress_type;
	char data[IPV6_UTIL_MAX_IPV6_ADDRESS_FIELD_LENGTH + 1];
}IPV6_UTIL_V6ADDR_FIELD;

typedef struct ipv6_util_v6_address_st{
	int type;
	IPV6_UTIL_V6ADDR_FIELD fields[IPV6_UTIL_MAX_IPV6_ADDRESS_FIELD_COUNT];
}IPV6_UTIL_V6ADDR;

typedef struct ipv6_util_st IPV6_UTIL_ST;

struct ipv6_util_st{
	int  type;
	int  compress_type;
	char src_ip[IPV6_UTIL_MAX_IPV4_MAPPED_IPV6_ADDRESS_LENGTH+1];
	char compress_ip[IPV6_UTIL_MAX_IPV6_ADDRESS_LENGTH+1];
	char uncompress_ip[IPV6_UTIL_MAX_IPV6_ADDRESS_LENGTH+1];
	char convert_ipv4[IPV6_UTIL_MAX_IPV4_ADDRESS_LENGTH+1];
	char ipv4_mapped_ipv6[IPV6_UTIL_MAX_IPV4_ADDRESS_LENGTH+1];
	
	void (*set_ip_address)(IPV6_UTIL_ST*, char *);
	int (*get_ip_address_version)( char *);
	int (*get_ipv6_address_type)( char *);
	char* (*get_convert_ip_address)(IPV6_UTIL_ST*);
	char* (*get_ipv4_address)(IPV6_UTIL_ST*);
	char* (*get_ipv4_mapped_address)(IPV6_UTIL_ST*);
	char* (*get_ipv6_compress_address)(IPV6_UTIL_ST*);
	char* (*get_ipv6_uncompress_address)(IPV6_UTIL_ST*);
	int (*convert)(IPV6_UTIL_ST*);	
	int (*verify_ipv6_address)(char *);
};

int init_ipv6_util(IPV6_UTIL_ST* inst);

#endif
